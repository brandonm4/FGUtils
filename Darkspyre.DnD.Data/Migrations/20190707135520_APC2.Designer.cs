// <auto-generated />
using System;
using Darkspyre.DnD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Darkspyre.DnD.Data.Migrations
{
    [DbContext(typeof(DnDdbContext))]
    [Migration("20190707135520_APC2")]
    partial class APC2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview5.19227.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Armor");

                    b.Property<int>("HD");

                    b.Property<DateTime>("ImportDate");

                    b.Property<string>("ImportSource");

                    b.Property<string>("Name");

                    b.Property<string>("NumSkills");

                    b.Property<string>("Proficiency");

                    b.Property<string>("Source");

                    b.Property<string>("SourceAbr");

                    b.Property<string>("SpellAbility");

                    b.Property<string>("Tools");

                    b.Property<string>("Wealth");

                    b.Property<string>("Weapons");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.ClassAutoLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClassId");

                    b.Property<Guid?>("FeatureId");

                    b.Property<int>("Level");

                    b.Property<bool>("ScoreImprovement");

                    b.Property<Guid?>("SlotsId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("SlotsId");

                    b.ToTable("ClassAutoLevel");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.ClassAutolevelFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ImportDate");

                    b.Property<string>("ImportSource");

                    b.Property<string>("Name");

                    b.Property<bool>("Optional");

                    b.Property<string>("Proficiency");

                    b.Property<string>("Source");

                    b.Property<string>("SourceAbr");

                    b.Property<string>("Special");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("ClassAutolevelFeature");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.ClassAutolevelFeatureModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<Guid?>("ClassAutolevelFeatureId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ClassAutolevelFeatureId");

                    b.ToTable("ClassAutolevelFeatureModifier");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.ClassAutolevelSlots", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Optional");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("ClassAutolevelSlots");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.EquipmentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AC");

                    b.Property<string>("Detail");

                    b.Property<string>("Dmg1");

                    b.Property<string>("Dmg2");

                    b.Property<string>("DmgType");

                    b.Property<DateTime>("ImportDate");

                    b.Property<string>("ImportSource");

                    b.Property<bool>("Magic");

                    b.Property<Guid?>("ModifierId");

                    b.Property<string>("Name");

                    b.Property<string>("Property");

                    b.Property<string>("Range");

                    b.Property<string>("Roll");

                    b.Property<string>("Source");

                    b.Property<string>("SourceAbr");

                    b.Property<string>("Stealth");

                    b.Property<string>("Strength");

                    b.Property<string>("Text");

                    b.Property<string>("Type");

                    b.Property<decimal>("Value");

                    b.Property<string>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ModifierId");

                    b.ToTable("EquipmentItems");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.EquipmentItemModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("EquipmentItemModifier");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.PlayerCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("APCId");

                    b.Property<string>("Name");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("APCId");

                    b.ToTable("PlayerCharacters");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.PlayerCharacterAPC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Compaints");

                    b.Property<string>("GeneralAgreeability");

                    b.Property<string>("GeneralMood");

                    b.Property<string>("IdleHabits");

                    b.Property<string>("MovementPattern");

                    b.Property<string>("SpeechChallengeToNPC");

                    b.Property<string>("SpeechChallengeToPC");

                    b.Property<string>("SpeechExploring");

                    b.Property<string>("SpeechInCombat");

                    b.Property<string>("SpeechRestCamp");

                    b.Property<string>("SpeechRestInside");

                    b.Property<string>("SpeechSolutionSuggestion");

                    b.Property<string>("SpeechStrategy");

                    b.Property<string>("SpeechThrowAway");

                    b.Property<string>("TacticActiveAssist");

                    b.Property<string>("TacticActiveCombat");

                    b.Property<string>("TacticActiveExplorationMechanic");

                    b.Property<string>("TacticActiveMelee");

                    b.Property<string>("TacticActiveRanged");

                    b.Property<string>("TacticPostCombat");

                    b.Property<string>("VoteLeanings");

                    b.HasKey("Id");

                    b.ToTable("PlayerCharacterAPCs");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.PlayerCharacterClassLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClassId");

                    b.Property<int>("Level");

                    b.Property<Guid>("PlayerCharacterId");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("PlayerCharacterId");

                    b.ToTable("PlayerCharacterClassLevel");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ability");

                    b.Property<DateTime>("ImportDate");

                    b.Property<string>("ImportSource");

                    b.Property<Guid?>("ModifierId");

                    b.Property<string>("Name");

                    b.Property<string>("Proficiency");

                    b.Property<string>("Size");

                    b.Property<string>("Source");

                    b.Property<string>("SourceAbr");

                    b.Property<byte>("Speed");

                    b.Property<string>("SpellAbility");

                    b.HasKey("Id");

                    b.HasIndex("ModifierId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.RaceModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("RaceModifier");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.RaceTrait", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid?>("RaceId");

                    b.Property<string>("Special");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceTrait");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.Spell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Classes");

                    b.Property<string>("Components");

                    b.Property<string>("Duration");

                    b.Property<DateTime>("ImportDate");

                    b.Property<string>("ImportSource");

                    b.Property<byte>("Level");

                    b.Property<string>("Name");

                    b.Property<string>("Range");

                    b.Property<bool>("Ritual");

                    b.Property<string>("Roll");

                    b.Property<string>("School");

                    b.Property<string>("Source");

                    b.Property<string>("SourceAbr");

                    b.Property<string>("Text");

                    b.Property<string>("Time");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.ClassAutoLevel", b =>
                {
                    b.HasOne("Darkspyre.DnD.Data.Entities.Class", null)
                        .WithMany("Autolevels")
                        .HasForeignKey("ClassId");

                    b.HasOne("Darkspyre.DnD.Data.Entities.ClassAutolevelFeature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId");

                    b.HasOne("Darkspyre.DnD.Data.Entities.ClassAutolevelSlots", "Slots")
                        .WithMany()
                        .HasForeignKey("SlotsId");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.ClassAutolevelFeatureModifier", b =>
                {
                    b.HasOne("Darkspyre.DnD.Data.Entities.ClassAutolevelFeature", null)
                        .WithMany("Modifiers")
                        .HasForeignKey("ClassAutolevelFeatureId");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.EquipmentItem", b =>
                {
                    b.HasOne("Darkspyre.DnD.Data.Entities.EquipmentItemModifier", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.PlayerCharacter", b =>
                {
                    b.HasOne("Darkspyre.DnD.Data.Entities.PlayerCharacterAPC", "APC")
                        .WithMany()
                        .HasForeignKey("APCId");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.PlayerCharacterClassLevel", b =>
                {
                    b.HasOne("Darkspyre.DnD.Data.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Darkspyre.DnD.Data.Entities.PlayerCharacter", "PlayerCharacter")
                        .WithMany("CharacterLevels")
                        .HasForeignKey("PlayerCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.Race", b =>
                {
                    b.HasOne("Darkspyre.DnD.Data.Entities.RaceModifier", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId");
                });

            modelBuilder.Entity("Darkspyre.DnD.Data.Entities.RaceTrait", b =>
                {
                    b.HasOne("Darkspyre.DnD.Data.Entities.Race", null)
                        .WithMany("Traits")
                        .HasForeignKey("RaceId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
